rules_version = '2';

// Firestore Rules
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin";
    }

    // Allow users to read/write their own data and admins to read all user data
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Allow admins to access adminData
    match /adminData/{docId} {
      allow read, write: if isAdmin();
    }

    // Products collection rules
    match /products/{productId} {
      // Anyone can read products
      allow read: if true;

      // Only admins can create, update, or delete products
      allow create, update, delete: if isAdmin();

      // Validate product data
      allow create, update: if isAdmin() &&
        request.resource.data.keys().hasAll(['name', 'price', 'description']) &&
        request.resource.data.name is string &&
        request.resource.data.name.size() > 0 &&
        request.resource.data.price is number &&
        request.resource.data.price > 0 &&
        request.resource.data.description is string;
    }
  }
}

// Storage Rules
service firebase.storage {
  match /b/{bucket}/o {
    // Helper function to check if user is admin (same as Firestore)
    function isAdmin() {
      return request.auth != null &&
        firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == "admin";
    }

    match /product_images/{imageId} {
      // Anyone can view product images
      allow read: if true;
      // Only admins can upload product images
      allow write: if isAdmin();
    }

    // Default deny all other access
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
} 